    @Override
    public void run(){
        //print opening hand
        while (winner == 0 && !Thread.currentThread().isInterrupted()){
            //System.out.println("Player "+this.playerId+"'s hand is: "+this.hand.toString());
            //check if this thread has won by all cards in its hand being the same
            if (this.hand.stream().distinct().count() <= 1){
                winner = playerId;
                for (Player player: Player.getPlayers()){
                    if (player.playerId != this.playerId){
                        player.interrupt();
                    }
                }
            }else{
                //draw and discard a card.
                try{
                    //discard a card
                    Card discardCard = discardCard();
                    discardDeck.getContents().add(discardCard);
                    //System.out.println("Player "+playerId+" discards a "+discardCard);
                    //draw a new card and tell the overseer about it.
                    Card newCard = drawDeck.getContents().take();
                    drawCard(newCard);
                    //System.out.println("Player "+playerId+" draws a "+newCard.getValue());
                }catch (InterruptedException e){
                    //if there is an interupt, the thread will stop
                    // With the new while loop I dont think this is necessary anymore but Ive left it in just in case
                    return;
                }catch (NullPointerException e){
                    //if discardDeck or drawDeck were not initialized, the thread will stop
                    return;
                }
                System.out.println("Player "+playerId+"'s hand is: "+hand.toString());
            }
        }
        //exit procedure
        System.out.println("Done");
    }